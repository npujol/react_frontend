/*
 * My stories API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The ProfileImage model module.
 * @module model/ProfileImage
 * @version v1
 */
export class ProfileImage {
  /**
   * Constructs a new <code>ProfileImage</code>.
   * @alias module:model/ProfileImage
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ProfileImage</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProfileImage} obj Optional instance to populate.
   * @return {module:model/ProfileImage} The populated <code>ProfileImage</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ProfileImage();
      if (data.hasOwnProperty('username'))
        obj.username = ApiClient.convertToType(data['username'], 'String');
      if (data.hasOwnProperty('bio'))
        obj.bio = ApiClient.convertToType(data['bio'], 'String');
      if (data.hasOwnProperty('image'))
        obj.image = ApiClient.convertToType(data['image'], 'String');
      if (data.hasOwnProperty('following'))
        obj.following = ApiClient.convertToType(data['following'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} username
 */
ProfileImage.prototype.username = undefined;

/**
 * @member {String} bio
 */
ProfileImage.prototype.bio = undefined;

/**
 * @member {String} image
 */
ProfileImage.prototype.image = undefined;

/**
 * @member {String} following
 */
ProfileImage.prototype.following = undefined;


